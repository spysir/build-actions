#
#
# 此文件为编译文件,一般情况下不使用这个来启动,运行build-openwrt.yml会自动触发编译
#
# 如果自动触发挂了的情况下，可以在这里选择好机型，选择 compile 启动编译
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#


name: 编译openwrt固件
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'build/Lede_source/start-up/start'

env:
  Github: https://github.com/${{github.repository}}
  Author: ${{github.actor}}
  Warehouse: ${{github.repository}}
  Run_number: ${{github.run_number}}
  Run_workflow: ${{github.workflow}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TZ: Asia/Shanghai

jobs:
  build:
    name: 编译 "${{matrix.target}}"
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    
    env:
      matrixtarget: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [Lede_source]
        
        # [Lede_source,Lienol_source,Mortal_source,Tianling_source,openwrt_amlogic]

    steps:
    - name: 准备结束
      uses: actions/checkout@v3

    - name: 读取脚本设置
      run: |
        git clone --depth 1 -b main https://github.com/281677160/common ${GITHUB_WORKSPACE}/build/common
        mv -f ${GITHUB_WORKSPACE}/build/common/*.sh ${GITHUB_WORKSPACE}/build/${{matrix.target}}/
        chmod -R +x ${GITHUB_WORKSPACE}/build
        source ${GITHUB_WORKSPACE}/build/${{matrix.target}}/common.sh && Diy_repo_url
        source ${GITHUB_WORKSPACE}/build/${{matrix.target}}/common.sh && Diy_settings
    
    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        source ${GITHUB_WORKSPACE}/build/${{matrix.target}}/common.sh && Diy_update
    
    - name: 下载"${{matrix.target}}"源码
      working-directory: /${{matrix.target}}
      run: |
        git clone -b "${REPO_BRANCH}" --single-branch "${REPO_URL}" openwrt
        ln -sf /${{matrix.target}}/openwrt ${GITHUB_WORKSPACE}/openwrt
    
    - name: 公 告
      run: |
        echo
        source ${GITHUB_WORKSPACE}/build/${{matrix.target}}/common.sh && Diy_variable
        source ${GITHUB_WORKSPACE}/build/${{matrix.target}}/common.sh && Diy_Notice
 
    - name: 加载源,补丁和自定义设置
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_menu
    
    - name: 缓存加速(7天内对应源码相同机型二次编译有效，每次只保留一个源码的缓存)
      if: env.USE_CACHEWRTBUILD == 'true'
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt

    - name: 生成配置文件
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_menu2
        
    - name: 启用在线更新
      continue-on-error: true
      if: env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      run: |
        cd openwrt
        source ${BUILD_PATH}/upgrade.sh && Diy_Part2
        cat ${BASE_PATH}/bin/openwrt_info
        
    - name: 编译信息
      continue-on-error: true
      if: env.BY_INFORMATION == 'true'
      run: |
        cd openwrt
        source ${BUILD_PATH}/upgrade.sh && GET_TARGET_INFO
        source ${BUILD_PATH}/common.sh && Diy_xinxi
        
    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    
    - name: 开始编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(($(nproc) + 1)) || make -j1 V=s
        echo "date=$(date "+%Y%m%d%H%M%S")" >> ${GITHUB_ENV}
        
    - name: 打包晶晨系列固件
      continue-on-error: true
      if: steps.compile.outcome == 'success' && env.AUTOMATIC_AMLOGIC == 'true'
      run: |
        cd ${GITHUB_WORKSPACE}
        source ${BUILD_PATH}/common.sh && Package_amlogic

    - name: 整理固件文件夹(需配合diy-part.sh设定使用)
      continue-on-error: true
      id: organizer
      run: |
        cd openwrt
        source ${BUILD_PATH}/common.sh && Diy_firmware
        
    - name: 上传固件在 github actions
      continue-on-error: true
      if: steps.compile.outcome == 'success' && env.UPLOAD_FIRMWARE == 'true'
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.SOURCE }}-${{ env.TARGET_PROFILE }}-firmware-${{ env.Firmware_Date }}
        path: ${{ env.FIRMWARE }}

    - name: 上传固件到「WeTransfer」
      continue-on-error: true
      if: steps.compile.outcome == 'success' && env.UPLOAD_WETRANSFER == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "##### WETRANSFER：$(cat wetransfer.log | grep https | cut -f3 -d" ")" >> update_log.txt
        sed -i "s/Download Link/WETRANSFER/g" wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    
    - name: 发布固件
      continue-on-error: true
      if: steps.compile.outcome == 'success' && env.UPLOAD_RELEASE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.SOURCE }}-${{ env.TARGET_PROFILE }}
        tag: ${{ env.date }}
        token: ${{ secrets.REPO_TOKEN }}
        allowUpdates: true
        bodyFile: "update_log.txt"
        artifacts: "${{ env.FIRMWARE }}/*"
        
    - name: 发送[在线更新固件]至云端1
      id: regular
      continue-on-error: true
      if: steps.compile.outcome == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@main
      with:
        name: AutoUpdate
        tag: AutoUpdate
        token: ${{ secrets.REPO_TOKEN }}
        allowUpdates: true
        bodyFile: "AutoUpdate_log.txt"
        artifacts: "openwrt/bin/Firmware/*"
        
    - name: 发送[在线更新固件]至云端2
      continue-on-error: true
      if: steps.regular.outcome == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      run: |
        mkdir -p Github_Tags
        cd Github_Tags
        wget -q --no-cookie --no-check-certificate https://api.github.com/repos/${{github.repository}}/releases/tags/AutoUpdate -O Github_Tags
        
    - name: 发送[在线更新固件]至云端3
      continue-on-error: true
      if: steps.regular.outcome == 'success' && env.REGULAR_UPDATE == 'true' && env.REPO_TOKEN
      uses: ncipollo/release-action@main
      with:
        name: AutoUpdate
        tag: AutoUpdate
        token: ${{ secrets.REPO_TOKEN }}
        allowUpdates: true
        bodyFile: "AutoUpdate_log.txt"
        artifacts: "Github_Tags/*"

    - name: Gotify push
      continue-on-error: true
      if: steps.regular.outcome == 'success'
      uses: cstuder/apprise-ga@master
      with:
        title: "固件编译成功"
        message: |
                ${{matrix.target}} 固件编译成功啦!
                https://github.com/spysir/build-actions
      env:
        APPRISE_URL: ${{ secrets.APPRISE_URL }}
